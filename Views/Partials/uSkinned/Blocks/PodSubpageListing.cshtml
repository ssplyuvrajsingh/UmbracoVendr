@inherits USNStarterKit.ViewPages.USNViewPage<USNBlock>

@{
    // Available as Pod Block type only

    var content = (Usn_Pb_PodSubpageListing)Model.BlockContent;

    //Settings taken from compositions common to all pod block types
    var uniqueSettings = (IUsn_Cmp_SubpageListing_Pod_Settings)Model.BlockSettings;
    var animateSettings = (IUsn_Cmp_AnimateSettings)Model.BlockSettings;

    string backgroundColorLabel = ViewData["backgroundColorLabel"].ToString();
    Usnstyle websiteStyle = (Usnstyle)Model.BaseModel.WebsiteStyle;

    USNAnimation animation = Umbraco.GetAnimationSettings(animateSettings.Animate, animateSettings.AnimationDelay, animateSettings.AnimationDuration, animateSettings.AnimationStyle);
    string itemTextAlignment = uniqueSettings.TextAlignment.HasValue() ? uniqueSettings.TextAlignment : "text-left";
    string itemHeadingSizeClass = uniqueSettings.ItemHeadingSize;
    string tabStyle = uniqueSettings.TabStyle.HasValue() ? uniqueSettings.TabStyle : "tab-basic";
    string uniqueID = Guid.NewGuid().ToString();
    int listPage = 0;

    //Get all main pages to display
    List<IPublishedContent> mainPages = new List<IPublishedContent>();
    List<string> tabHeadings = new List<string>();
    List<string> tabIcons = new List<string>();
    List<USNMultiUrlPicker> links = new List<USNMultiUrlPicker>();

    if (content.SecondaryHeading.HasValue())
    {
        <p class="secondary-heading @content.SecondaryHeading.Style @(backgroundColorLabel)-secondary-heading">@Html.Raw(content.SecondaryHeading.Text)</p>
    }
    if (content.Heading.HasValue())
    {
        <p class="heading @content.Heading.Style @(backgroundColorLabel)-heading @animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay" data-os-animation-duration="@animation.AnimationDuration">@Html.Raw(content.Heading.Text)</p>
    }
    if (content.LinkToListing != null && content.LinkToListing.Any())
    {
        foreach (var pageLink in content.LinkToListing)
        {
            if (pageLink.link.LinkType == USNLink.UrlPickerTypes.Content && USNThemeService.DisplayLink(pageLink))
            {
                Udi udi;
                bool udiCorrect = Udi.TryParse(pageLink.link.LinkUdi, out udi);
                var page = Umbraco.Content(udi);

                if (page != null && (page.IsDocumentType(Usnpage.ModelTypeAlias) || page.IsDocumentType(UsnblogLandingPage.ModelTypeAlias) || page.IsDocumentType(UsnblogCategoryPage.ModelTypeAlias)))
                {
                    mainPages.Add(page);
                    tabHeadings.Add(pageLink.link.LinkText);
                    tabIcons.Add(pageLink.icon);
                    links.Add(pageLink);
                }
            }
        }
    }

    if (mainPages.Any() && mainPages.Count() > 1)
    {
        <div class="repeatable tabbed @tabStyle @animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay" data-os-animation-duration="@animation.AnimationDuration">

            <nav class="tabs">
                <ul class="nav @itemTextAlignment" role="tablist">
                    @foreach (var item in mainPages)
                    {
                        <li class="tab" role="presentation">
                            <a class="nav-item nav-button-link nav-link @(listPage == 0 ? "active" : "")" id="nav_tab_@(uniqueID)_@listPage" data-toggle="tab" href="#nav_@(uniqueID)_@listPage" role="tab" aria-controls="nav_@(uniqueID)_@listPage" aria-selected="true">
                                @Html.Raw(tabIcons[listPage])@tabHeadings[listPage]
                            </a>
                        </li>
                        listPage += 1;
                    }
                </ul>
            </nav>

        </div>
    }

    if (mainPages.Any())
    {
        listPage = 0;

        <div class="repeatable-content tab-content @animation.AnimationClass" data-os-animation="@animation.AnimationStyle" data-os-animation-delay="@animation.AnimationDelay" data-os-animation-duration="@animation.AnimationDuration">
            @foreach (var landingPage in mainPages)
            {
                <div id="nav_@(uniqueID)_@listPage" role="tabpanel" class="tab-pane @(listPage == 0 ? "show active" : String.Empty)">
                    <div class="component-main row listing listing_basic-grid listing_short">

                        @if (landingPage.IsDocumentType(Usnpage.ModelTypeAlias))
                        {
                            var pages = landingPage.Children.Where(x => x.IsDocumentType(Usnpage.ModelTypeAlias) && x.IsVisible());

                            if (uniqueSettings.PagesToDisplay.HasValue() && uniqueSettings.PagesToDisplay != 0)
                            {
                                pages = pages.Take(uniqueSettings.PagesToDisplay).ToList();
                            }

                            foreach (var page in pages)
                            {
                                <div class="item item_text-only items-1 col-12">
                                    <a href="@page.Url()">
                                        <p class="heading @itemHeadingSizeClass @(backgroundColorLabel)-heading">
                                            @if (page.HasValue("subPageListingLinkText"))
                                            {
                                                @Html.Raw(page.Value<string>("subPageListingLinkText"))
                                            }
                                            else
                                            {
                                                @page.Name
                                            }
                                        </p>
                                    </a>
                                </div>

                            }
                        }
                        else if (landingPage.IsDocumentType(UsnblogLandingPage.ModelTypeAlias) || landingPage.IsDocumentType(UsnblogCategoryPage.ModelTypeAlias))
                        {
                            string category = null;
                            IPublishedContent blogLandingPage;

                            if (landingPage.IsDocumentType(UsnblogCategoryPage.ModelTypeAlias))
                            {
                                category = landingPage.Id.ToString();
                                blogLandingPage = landingPage.AncestorOrSelf(UsnblogLandingPage.ModelTypeAlias);
                            }
                            else
                            {
                                blogLandingPage = landingPage;
                            }

                            int pagesToDisplay = (uniqueSettings.PagesToDisplay.HasValue() && uniqueSettings.PagesToDisplay != 0) ? uniqueSettings.PagesToDisplay : -1;

                            USNSearchResults searchResult = USNBlogService.GetBlogListing(blogLandingPage.Id, category, 1, pagesToDisplay);

                            if (searchResult != null && searchResult.SearchResults.Any())
                            {
                                foreach (var item in searchResult.SearchResults)
                                {
                                    <div class="item item_text-only items-1 col-12">
                                        <a href="@item.Url()">
                                            <p class="heading @itemHeadingSizeClass @(backgroundColorLabel)-heading">
                                                @if (item.HasValue("subPageListingLinkText"))
                                                {
                                                    @Html.Raw(item.Value<string>("subPageListingLinkText"))
                                                }
                                                else
                                                {
                                                    @item.Name
                                                }
                                            </p>
                                        </a>
                                        <div class="meta @(backgroundColorLabel)-text">
                                            <p class="date"><time>@(item.Value<DateTime>("postDate").ToString("dd MMM yyyy"))</time></p>
                                        </div>
                                    </div>
                                }
                            }
                        }

                    </div>

                    <p class="link">
                        @{
                            string buttonBgClass = USNThemeService.GetBackgroundColorClass(links[listPage].color.sortOrder, "button", websiteStyle);
                            string buttonBgHoverClass = USNThemeService.GetBackgroundColorClass(links[listPage].color.sortOrder, "buttonHover", websiteStyle);

                        }

                        <a class="btn @(links[listPage].sizeStyle) @buttonBgClass @buttonBgHoverClass @(links[listPage].color.label)-text @(links[listPage].color.label)-borders" href="@(links[listPage].link.LinkUrl)" @Html.Raw(links[listPage].link.LinkTarget) @Html.Raw(links[listPage].link.LinkTitle)>
                            <span></span>
                            @Html.Raw(links[listPage].icon) @Html.Raw(links[listPage].link.LinkText)@Html.Raw(links[listPage].link.LinkTargetIcon)
                        </a>
                    </p>

                </div>

                listPage += 1;
            }
        </div>
    }
}
